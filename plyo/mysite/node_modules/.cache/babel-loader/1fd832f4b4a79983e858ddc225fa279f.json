{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jane_c24/Documents/Projects/plyo/frontend/src/Form.js\",\n    _s = $RefreshSig$();\n\nimport Slider from '@material-ui/core/Slider';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\nimport { useState } from 'react';\nimport { blue, blueGrey } from '@material-ui/core/colors';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nconst myButtonGroup = styled(ButtonGroup)({\n  borderColor: 'white',\n  backgroundColor: 'transparent!important'\n});\nconst mySlider = styled(Slider)({\n  color: '#0bc5af'\n});\n\nfunction valuetext(value) {\n  return '{value} min';\n}\n\nconst Form = ({\n  handleSubmit,\n  handleLevel,\n  handleFocus,\n  level,\n  focus\n}) => {\n  _s();\n\n  //hooks for formatting changes on button click\n  const accentColor = 'rgba(255, 255, 255, 0.4)';\n  const [absBackgroundColor, setAbsBackgroundColor] = useState('transparent');\n  const [cardioBackgroundColor, setCardioBackgroundColor] = useState('transparent');\n  const [legsBackgroundColor, setLegsBackgroundColor] = useState('transparent');\n  const [fullBackgroundColor, setFullBackgroundColor] = useState(accentColor);\n  const [beginnerBackgroundColor, setBeginnerBackgroundColor] = useState('transparent');\n  const [mediumBackgroundColor, setMediumBackgroundColor] = useState(accentColor);\n  const [hardBackgroundColor, setHardBackgroundColor] = useState('transparent');\n  const [disable, setDisable] = useState(false); //custom styling for all buttons in form\n\n  const MyButton = styled(Button)({\n    color: 'white',\n    borderColor: 'white',\n    backgroundColor: 'transparent',\n    marginLeft: '10px'\n  }); //runs when focus is changed\n\n  const handleFocusBtn = focus => {\n    //first, run this to pass to exerciseDisplay\n    handleFocus(focus); //change background color if clicked\n\n    if (focus === 'abs') {\n      setAbsBackgroundColor(accentColor);\n      setCardioBackgroundColor('transparent');\n      setLegsBackgroundColor('transparent');\n      setFullBackgroundColor('transparent'); //disable if abs selected (no levels for abs)\n\n      setDisable(true);\n    } else if (focus === 'cardio') {\n      setAbsBackgroundColor('transparent');\n      setCardioBackgroundColor(accentColor);\n      setLegsBackgroundColor('transparent');\n      setFullBackgroundColor('transparent');\n      setDisable(false);\n    } else if (focus === 'legs') {\n      setAbsBackgroundColor('transparent');\n      setCardioBackgroundColor('transparent');\n      setLegsBackgroundColor(accentColor);\n      setFullBackgroundColor('transparent');\n      setDisable(false);\n    } else if (focus === 'fullBody') {\n      setAbsBackgroundColor('transparent');\n      setCardioBackgroundColor('transparent');\n      setLegsBackgroundColor('transparent');\n      setFullBackgroundColor(accentColor);\n      setDisable(false);\n    }\n  };\n\n  const handleLevelBtn = level => {\n    handleLevel(level);\n\n    if (level === 1) {\n      setBeginnerBackgroundColor(accentColor);\n      setMediumBackgroundColor('transparent');\n      setHardBackgroundColor('transparent');\n    }\n\n    if (level === 2) {\n      setBeginnerBackgroundColor('transparent');\n      setMediumBackgroundColor(accentColor);\n      setHardBackgroundColor('transparent');\n    }\n\n    if (level === 3) {\n      setBeginnerBackgroundColor('transparent');\n      setMediumBackgroundColor('transparent');\n      setHardBackgroundColor(accentColor);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"glass\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Focus\", /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          \"aria-label\": \"outlined primary button group\",\n          children: [/*#__PURE__*/_jsxDEV(MyButton, {\n            className: \"abs-btn\",\n            onClick: () => handleFocusBtn('abs'),\n            style: {\n              backgroundColor: absBackgroundColor\n            },\n            children: \" Abs \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n            className: \"cardio-btn\",\n            onClick: () => handleFocusBtn('cardio'),\n            style: {\n              backgroundColor: cardioBackgroundColor\n            },\n            children: \"Cardio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n            className: \"legs-btn\",\n            onClick: () => handleFocusBtn('legs'),\n            style: {\n              backgroundColor: legsBackgroundColor\n            },\n            children: \"Legs/Glutes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n            className: \"full-btn\",\n            onClick: () => handleFocusBtn('fullBody'),\n            style: {\n              backgroundColor: fullBackgroundColor\n            },\n            children: \" Full Body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginTop: \"38px\"\n        },\n        children: [\"Level / Intensity\", /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          \"aria-label\": \"outlined primary button group\",\n          children: [/*#__PURE__*/_jsxDEV(MyButton, {\n            onClick: () => handleLevelBtn(1),\n            style: {\n              backgroundColor: beginnerBackgroundColor\n            },\n            disabled: disable,\n            children: \" Beginner \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n            onClick: () => handleLevelBtn(2),\n            style: {\n              backgroundColor: mediumBackgroundColor\n            },\n            disabled: disable,\n            children: \" Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n            onClick: () => handleLevelBtn(3),\n            style: {\n              backgroundColor: hardBackgroundColor\n            },\n            disabled: disable,\n            children: \"Hard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Total Time (Minutes)\", /*#__PURE__*/_jsxDEV(Slider, {\n          defaultValue: 5,\n          getAriaValueText: valuetext,\n          onChangeCommitted: (e, value) => handleSubmit(value),\n          \"area-labelledby\": \"discrete-slider\",\n          valueLabelDisplay: \"auto\",\n          step: 5,\n          min: 5,\n          max: 20,\n          style: {\n            width: \"240px\",\n            marginLeft: \"15px\",\n            marginTop: \"50px\",\n            color: \"rgba(255, 255, 255, 0.7\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"challengebutton\",\n        children: \" CHALLENGE MODE!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Form, \"jiY/eh4cnTazb9Fyw5gdKI5yTq4=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/jane_c24/Documents/Projects/plyo/frontend/src/Form.js"],"names":["Slider","ButtonGroup","Button","styled","useState","blue","blueGrey","InputLabel","MenuItem","FormHelperText","FormControl","Select","myButtonGroup","borderColor","backgroundColor","mySlider","color","valuetext","value","Form","handleSubmit","handleLevel","handleFocus","level","focus","accentColor","absBackgroundColor","setAbsBackgroundColor","cardioBackgroundColor","setCardioBackgroundColor","legsBackgroundColor","setLegsBackgroundColor","fullBackgroundColor","setFullBackgroundColor","beginnerBackgroundColor","setBeginnerBackgroundColor","mediumBackgroundColor","setMediumBackgroundColor","hardBackgroundColor","setHardBackgroundColor","disable","setDisable","MyButton","marginLeft","handleFocusBtn","handleLevelBtn","marginTop","e","width"],"mappings":"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","sourcesContent":["import Slider from '@material-ui/core/Slider'\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button'\nimport { styled } from '@material-ui/core/styles';\nimport { useState } from 'react';\nimport { blue, blueGrey } from '@material-ui/core/colors';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n\nconst myButtonGroup = styled(ButtonGroup)({\n    borderColor: 'white',\n    backgroundColor: 'transparent!important',\n})\n\nconst mySlider = styled(Slider)({\n    color: '#0bc5af'\n})\n\nfunction valuetext(value){\n    return '{value} min'\n}\n\nconst Form = ({handleSubmit, handleLevel, handleFocus, level, focus}) => {\n    //hooks for formatting changes on button click\n    const accentColor = 'rgba(255, 255, 255, 0.4)';\n    const [absBackgroundColor, setAbsBackgroundColor] = useState('transparent');\n    const [cardioBackgroundColor, setCardioBackgroundColor] = useState('transparent');\n    const [legsBackgroundColor, setLegsBackgroundColor] = useState('transparent');\n    const [fullBackgroundColor, setFullBackgroundColor] = useState(accentColor);\n    const [beginnerBackgroundColor, setBeginnerBackgroundColor] = useState('transparent');\n    const [mediumBackgroundColor, setMediumBackgroundColor] = useState(accentColor);\n    const [hardBackgroundColor, setHardBackgroundColor] = useState('transparent');\n    const [disable, setDisable] = useState(false);\n\n\n    //custom styling for all buttons in form\n    const MyButton = styled(Button)({\n        color: 'white',\n        borderColor: 'white',\n        backgroundColor: 'transparent',\n        marginLeft: '10px',\n    })\n\n    //runs when focus is changed\n    const handleFocusBtn = (focus) => {\n        //first, run this to pass to exerciseDisplay\n        handleFocus(focus)\n\n        //change background color if clicked\n        if (focus === 'abs'){\n            setAbsBackgroundColor(accentColor)\n            setCardioBackgroundColor('transparent')\n            setLegsBackgroundColor('transparent')\n            setFullBackgroundColor('transparent')\n            //disable if abs selected (no levels for abs)\n            setDisable(true);\n        }\n        else if (focus === 'cardio'){\n            setAbsBackgroundColor('transparent')\n            setCardioBackgroundColor(accentColor)\n            setLegsBackgroundColor('transparent')\n            setFullBackgroundColor('transparent')\n            setDisable(false);\n        }\n        else if (focus === 'legs'){\n            setAbsBackgroundColor('transparent')\n            setCardioBackgroundColor('transparent')\n            setLegsBackgroundColor(accentColor)\n            setFullBackgroundColor('transparent')\n            setDisable(false);\n        }\n        else if (focus === 'fullBody'){\n            setAbsBackgroundColor('transparent')\n            setCardioBackgroundColor('transparent')\n            setLegsBackgroundColor('transparent')\n            setFullBackgroundColor(accentColor)\n            setDisable (false);\n        }\n    }\n\n    const handleLevelBtn = (level) => {\n        handleLevel(level)\n\n        if (level === 1){\n            setBeginnerBackgroundColor(accentColor)\n            setMediumBackgroundColor('transparent')\n            setHardBackgroundColor('transparent')\n        }\n        if (level === 2){\n            setBeginnerBackgroundColor('transparent')\n            setMediumBackgroundColor(accentColor)\n            setHardBackgroundColor('transparent')\n        }\n        if (level === 3){\n            setBeginnerBackgroundColor('transparent')\n            setMediumBackgroundColor('transparent')\n            setHardBackgroundColor(accentColor)\n        }\n    }\n    \n\n    return (\n        <div className = \"form\">\n            <section className=\"glass\">\n                <h2>Focus\n                    <ButtonGroup aria-label=\"outlined primary button group\" >\n                    <MyButton className=\"abs-btn\" onClick={() => handleFocusBtn('abs')} style={{backgroundColor: absBackgroundColor}} > Abs </MyButton>\n                    <MyButton className=\"cardio-btn\" onClick={() => handleFocusBtn('cardio')} style={{backgroundColor: cardioBackgroundColor}}>Cardio</MyButton>\n                    <MyButton className=\"legs-btn\" onClick={() => handleFocusBtn('legs')} style={{backgroundColor: legsBackgroundColor}}>Legs/Glutes</MyButton>\n                    <MyButton className=\"full-btn\" onClick={() => handleFocusBtn('fullBody')} style={{backgroundColor: fullBackgroundColor}}> Full Body</MyButton>\n                    </ButtonGroup>\n                </h2>\n\n                <h2 style={{marginTop: \"38px\"}}>Level / Intensity\n                    <ButtonGroup aria-label=\"outlined primary button group\" >\n                    {/*<MyButton onClick={() => handleLevelBtn(1)} > Low Impact </MyButton>*/}\n                    <MyButton onClick={() => handleLevelBtn(1)} style={{backgroundColor: beginnerBackgroundColor}} disabled={disable} > Beginner </MyButton>\n                    <MyButton onClick={() => handleLevelBtn(2)} style={{backgroundColor: mediumBackgroundColor}} disabled={disable} > Medium</MyButton>\n                    <MyButton onClick={() => handleLevelBtn(3)} style={{backgroundColor: hardBackgroundColor}} disabled={disable} >Hard</MyButton>\n                    </ButtonGroup>\n                </h2>\n            \n\n                <h2>Total Time (Minutes)<Slider defaultValue={5} getAriaValueText={valuetext} onChangeCommitted={(e, value)=> handleSubmit(value)} area-labelledby=\"discrete-slider\" valueLabelDisplay=\"auto\" step={5} min={5} max={20} style={{width: \"240px\", marginLeft:\"15px\", marginTop:\"50px\", color: \"rgba(255, 255, 255, 0.7\"}}\n                ></Slider></h2>\n                \n\n                <button className = \"challengebutton\"> CHALLENGE MODE!</button>\n                {/*<button className = \"challengebutton\" style={{marginTop: \"10px\"}} onClick={handleSubmit}> Let's Go!</button>*/}\n            </section>\n        </div>\n      );\n}\n \nexport default Form;"]},"metadata":{},"sourceType":"module"}