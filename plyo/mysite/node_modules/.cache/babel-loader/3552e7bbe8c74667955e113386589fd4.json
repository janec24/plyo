{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jane_c24/Documents/Projects/plyo/frontend/src/ExerciseDisplay.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Exercises from './Exercises';\nimport Progress from './Progress';\nimport { useEffect } from 'react';\nimport React from 'react';\n\nconst ExerciseDisplay = ({\n  num,\n  focus,\n  level,\n  time,\n  sets\n}) => {\n  _s();\n\n  const myRef = /*#__PURE__*/React.createRef();\n  const [exercises, setExercises] = useState(null);\n  const [exerciseBank, setExerciseBank] = useState(null); //create newTime variable here that changes when we submit form\n\n  const [newTime, setNewTime] = useState(null);\n  const [newSets, setNewSets] = useState(null);\n  const [setCounter, setSetCounter] = useState(1);\n  const [currNum, setCurrNum] = useState(5);\n  var newExercises = [];\n  const [allCurrentExercises, setAllCurrentExercises] = useState(null); //onload, exercises are not displayed\n\n  const [showResults, setShowResults] = useState(false); //fetch data from backend on load\n\n  useEffect(() => {\n    fetch('http://127.0.0.1:8000/api/workout/').then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      setExerciseBank(data);\n    });\n  }, []); //once submit button is changed, exercises are loaded up based on given values\n\n  const changeDisplay = (num, level, focus, time, sets) => {\n    setNewTime(time);\n    setNewSets(sets);\n    setCurrNum(num);\n    setSetCounter(1);\n    console.log(\"Changing exercise list to: \" + num + level + focus + newTime + \"s\"); //first button click reveals this group of components \n\n    setShowResults(true); //scroll to exercises when button is clicked\n\n    window.scrollTo(0, myRef.current.offsetTop);\n    var focusID = null;\n\n    if (focus === 'upper') {\n      focusID = 1;\n    }\n\n    if (focus === 'legs') {\n      focusID = 2;\n    }\n\n    if (focus === 'cardio') {\n      focusID = 3;\n    }\n\n    if (focus === 'abs') {\n      focusID = 4;\n    } // filtering based on focus - dont need to filter if full body\n\n\n    var newExerciseBank = exerciseBank;\n\n    if (focus !== 'fullBody') {\n      newExerciseBank = exerciseBank.filter(exercise => exercise.focus === focusID);\n    } //don't need to filter level if abs, otherwise we do filter \n\n\n    if (focus !== 'abs') {\n      newExerciseBank = newExerciseBank.filter(exercise => exercise.level <= level);\n    } //add the number of requested exercises (num) to new array\n\n\n    let added = new Map();\n\n    for (let i = 0; i < num; i++) {\n      let random = Math.floor(Math.random() * newExerciseBank.length);\n\n      if (newExerciseBank.length > num) {\n        while (added[random] === 1) {\n          random = Math.floor(Math.random() * newExerciseBank.length);\n        }\n      }\n\n      newExercises.push(newExerciseBank[random]);\n      added[random] = 1;\n    }\n\n    console.log(newExercises);\n    setExercises(newExercises);\n    setAllCurrentExercises(newExercises);\n  }; //pass the first exercise as current so that it can be deleted once completed\n\n\n  if (exercises != null) {\n    if (exercises.length > 0) {\n      var id = exercises[0].id;\n      var current = exercises[0];\n    } else {\n      var id = null;\n      var current = null;\n    }\n  }\n\n  const increaseSets = () => {\n    setSetCounter(setCounter + 1);\n  }; //called when the timer reaches 0 -> deletes the first exercise once completed, changes exercise state \n\n\n  const handleDelete = (id, numDone, allCurrentExercises) => {\n    console.log(allCurrentExercises);\n\n    if (id != null) {\n      const exercisesWithoutFirst = exercises.filter(exercise => exercise.id !== id);\n      setExercises(exercisesWithoutFirst);\n    }\n\n    if (numDone === currNum) {\n      setExercises(allCurrentExercises);\n      console.log(\"TESTING NEW SET RESET: \");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ExerciseDisplay\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"submitButton\",\n      onClick: () => changeDisplay(num, level, focus, time, sets),\n      children: \" Let's Go!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: myRef,\n      children: [\" \", showResults ? /*#__PURE__*/_jsxDEV(Progress, {\n        newTime: newTime,\n        id: id,\n        current: current,\n        handleDelete: handleDelete,\n        sets: newSets,\n        setCounter: setCounter,\n        currNum: currNum,\n        increaseSets: increaseSets,\n        allCurrentExercises: allCurrentExercises\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 46\n      }, this) : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", showResults ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Num Exercises: \", num, \" Focus: \", focus, \" Level: \", level, \" Time: \", newTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 34\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), exercises && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", showResults ? /*#__PURE__*/_jsxDEV(Exercises, {\n        Exercises: exercises\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 47\n      }, this) : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExerciseDisplay, \"YJdTpY2lZWQi0Nf0pcanGywA7is=\");\n\n_c = ExerciseDisplay;\nexport default ExerciseDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExerciseDisplay\");","map":{"version":3,"sources":["/Users/jane_c24/Documents/Projects/plyo/frontend/src/ExerciseDisplay.js"],"names":["useState","Exercises","Progress","useEffect","React","ExerciseDisplay","num","focus","level","time","sets","myRef","createRef","exercises","setExercises","exerciseBank","setExerciseBank","newTime","setNewTime","newSets","setNewSets","setCounter","setSetCounter","currNum","setCurrNum","newExercises","allCurrentExercises","setAllCurrentExercises","showResults","setShowResults","fetch","then","res","json","data","console","log","changeDisplay","window","scrollTo","current","offsetTop","focusID","newExerciseBank","filter","exercise","added","Map","i","random","Math","floor","length","push","id","increaseSets","handleDelete","numDone","exercisesWithoutFirst"],"mappings":"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","sourcesContent":["import {useState} from 'react';\nimport Exercises from './Exercises';\nimport Progress from './Progress';\nimport {useEffect} from 'react'\nimport React from 'react'\n\nconst ExerciseDisplay = ({num, focus, level, time, sets}) => {\n    const myRef = React.createRef()\n    const [exercises, setExercises] = useState(null)\n    const [exerciseBank, setExerciseBank] = useState(null)\n    //create newTime variable here that changes when we submit form\n    const [newTime, setNewTime] = useState(null)\n    const [newSets, setNewSets] = useState(null)\n    const [setCounter, setSetCounter] = useState(1)\n    const [currNum, setCurrNum] = useState(5)\n    var newExercises = []\n    const [allCurrentExercises, setAllCurrentExercises] = useState(null)\n     //onload, exercises are not displayed\n     const [showResults, setShowResults] = useState(false)\n    \n   //fetch data from backend on load\n   useEffect(()=> {\n       fetch('http://127.0.0.1:8000/api/workout/')\n        .then(res => {\n           return res.json();\n        })\n        .then(data => {\n            console.log(data)\n            setExerciseBank(data)\n        })\n   }, []);\n\n    //once submit button is changed, exercises are loaded up based on given values\n    const changeDisplay = (num, level, focus, time, sets) => {\n        setNewTime(time);\n        setNewSets(sets);\n        setCurrNum(num);\n        setSetCounter(1);\n\n        console.log(\"Changing exercise list to: \" + num + level + focus + newTime + \"s\")\n        //first button click reveals this group of components \n        setShowResults(true)\n        \n        //scroll to exercises when button is clicked\n        window.scrollTo(0, myRef.current.offsetTop);\n\n        var focusID = null\n        if (focus === 'upper'){\n            focusID = 1\n        }\n        if (focus === 'legs'){\n            focusID = 2\n        }\n        if (focus === 'cardio'){\n            focusID = 3\n        }\n        if (focus === 'abs'){\n            focusID = 4\n        }\n        \n        // filtering based on focus - dont need to filter if full body\n        var newExerciseBank = exerciseBank\n        if (focus !== 'fullBody'){\n            newExerciseBank = exerciseBank.filter(exercise => exercise.focus === focusID)\n        }\n        //don't need to filter level if abs, otherwise we do filter \n        if (focus!== 'abs'){\n            newExerciseBank = newExerciseBank.filter(exercise => exercise.level <= level)\n        }\n\n        //add the number of requested exercises (num) to new array\n        let added = new Map()\n        for (let i = 0; i<num; i++){\n            let random = Math.floor(Math.random()*newExerciseBank.length)\n            if (newExerciseBank.length > num) {\n                while (added[random] === 1){\n                random =Math.floor(Math.random()*newExerciseBank.length)\n                }\n            }\n            newExercises.push(newExerciseBank[random])\n            added[random] = 1\n            }\n        console.log(newExercises)\n        setExercises(newExercises);\n        setAllCurrentExercises(newExercises)\n    }\n\n    //pass the first exercise as current so that it can be deleted once completed\n    if (exercises != null){\n        if (exercises.length > 0){\n            var id = exercises[0].id;\n            var current = exercises[0]\n        }\n        else{\n            var id = null\n            var current = null\n        }\n    }\n\n    const increaseSets = ()=>{\n        setSetCounter(setCounter+1);\n    }\n\n     //called when the timer reaches 0 -> deletes the first exercise once completed, changes exercise state \n     const handleDelete = (id, numDone, allCurrentExercises) => {\n        console.log(allCurrentExercises)\n        if (id != null){\n            const exercisesWithoutFirst = exercises.filter(exercise => exercise.id !== id);\n            setExercises(exercisesWithoutFirst);\n        }\n        if (numDone === currNum){\n            setExercises(allCurrentExercises)\n            console.log(\"TESTING NEW SET RESET: \")\n        }\n    } \n\n    return(\n        <div className=\"ExerciseDisplay\">\n            <button className=\"submitButton\" onClick={()=> changeDisplay(num, level, focus, time, sets)}> Let's Go!</button>\n            <div ref={myRef}> {showResults ? <Progress newTime = {newTime} id={id} current={current} handleDelete={handleDelete} sets={newSets} setCounter={setCounter} currNum={currNum} increaseSets = {increaseSets} allCurrentExercises={allCurrentExercises}/> : null} </div>\n            <div> {showResults ? <h1> Num Exercises: {num} Focus: {focus} Level: {level} Time: {newTime}</h1> : null}</div>\n            {exercises && <div> {showResults? <Exercises Exercises = {exercises}/> : null} </div>}\n        </div>\n    );\n}\nexport default ExerciseDisplay;"]},"metadata":{},"sourceType":"module"}