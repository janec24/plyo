{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jane_c24/Documents/Projects/plyo/frontend/src/Progress.js\",\n    _s = $RefreshSig$();\n\nimport TimerDisplay from './TimerDisplay';\nimport TimerButton from './TimerButton';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport useSound from 'use-sound';\nimport beep from './beep.wav';\nimport arms from './arms.png';\nimport legs from './legs.png';\nimport cardio from './cardio.png';\nimport abs from './abs.png';\n\nconst Progress = ({\n  newTime,\n  id,\n  current,\n  handleDelete,\n  sets,\n  setCounter,\n  currNum,\n  increaseSets,\n  allCurrentExercises\n}) => {\n  _s();\n\n  const [timer, setTimer] = useState({\n    ms: 0,\n    s: newTime,\n    m: 0,\n    h: 0\n  });\n  const [interv, setInterv] = useState();\n  const [status, setStatus] = useState(0);\n  const [totalSets, setTotalSets] = useState(0);\n  const [numDone, setNumDone] = useState(1);\n  const [progressPercent, setProgressPercent] = useState(0); //Status 0 : waiting\n  //Status 1: running\n  //Status 2: stopped\n\n  const start = () => {\n    run();\n    setStatus(1);\n    setInterv(setInterval(run, 10));\n  };\n\n  var updatedMs = timer.ms;\n  var updatedS = timer.s;\n  var updatedM = timer.m;\n  var updatedH = timer.h;\n\n  const updatedPercent = () => {\n    let numerator = numDone - 1 + numDone * (setCounter - 1);\n    let denominator = totalSets * currNum;\n    let percent = numerator / denominator * 100 + \"%\";\n    console.log(numerator, denominator, percent);\n    setProgressPercent(percent);\n  }; //Checks if timer has reached 0 -> if so, resets timer and deletes most recent exercise\n\n\n  useEffect(() => {\n    if (updatedMs === 0 && updatedS === 0 && updatedM === 0 & updatedH === 0) {\n      play();\n      reset();\n      handleDelete(id, numDone, allCurrentExercises);\n      setNumDone(numDone + 1);\n\n      if (numDone === currNum) {\n        increaseSets();\n        setNumDone(1);\n      }\n\n      updatedPercent();\n    }\n  });\n  useEffect(() => {\n    setTimer({\n      ms: 0,\n      s: newTime,\n      m: 0,\n      h: 0\n    });\n  }, [newTime]);\n  useEffect(() => {\n    setTotalSets(sets);\n  }, [sets]); //for continuously running timer: \n\n  const [play] = useSound(beep); //Decrements every ms\n\n  const run = () => {\n    if (updatedM === 0) {\n      if (updatedH > 0) {\n        updatedH--;\n        updatedM = 59;\n      }\n    }\n\n    if (updatedS === 0) {\n      if (updatedM > 0) {\n        updatedM--;\n        updatedS = 59;\n      }\n    }\n\n    if (updatedMs === 0) {\n      if (updatedS > 0) {\n        updatedS--;\n        updatedMs = 99;\n      }\n    }\n\n    updatedMs--; //console.log(\"timeron\")\n\n    return setTimer({\n      ms: updatedMs,\n      s: updatedS,\n      m: updatedM,\n      h: updatedH\n    });\n  };\n\n  const stop = () => {\n    clearInterval(interv);\n    setStatus(2);\n    console.log(\"Timer Stopped\");\n  };\n\n  const reset = () => {\n    clearInterval(interv);\n    setStatus(0);\n    setTimer({\n      ms: 0,\n      s: newTime,\n      m: 0,\n      h: 0\n    });\n    console.log(timer, interv, status);\n  };\n\n  const resume = () => start();\n\n  const currentIcon = focus => {\n    if (focus === 1) {\n      return abs;\n    } else if (focus === 2) {\n      return legs;\n    } else if (focus === 3) {\n      return cardio;\n    } else {\n      return abs;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", current == null ? console.log(\"no more exercises\") : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"exercise-counter\",\n          children: [\" Exercise: \", numDone, \" / \", currNum, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            style: {\n              left: {\n                progressPercent\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-after\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 86\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"set-counter\",\n          children: [\" Set: \", setCounter, \" / \", totalSets, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"icon\",\n        src: current.icon ? current.icon : currentIcon(current.focus)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"exercise-title\",\n        children: [\" \", current.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TimerDisplay, {\n        timer: timer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TimerButton, {\n        start: start,\n        status: status,\n        stop: stop,\n        reset: reset,\n        resume: resume,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 68\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Progress, \"dNbuNcqiUaPXIQas5cNjcmQa9uI=\", false, function () {\n  return [useSound];\n});\n\n_c = Progress;\nexport default Progress;\n\nvar _c;\n\n$RefreshReg$(_c, \"Progress\");","map":{"version":3,"sources":["/Users/jane_c24/Documents/Projects/plyo/frontend/src/Progress.js"],"names":["TimerDisplay","TimerButton","useState","useEffect","useSound","beep","arms","legs","cardio","abs","Progress","newTime","id","current","handleDelete","sets","setCounter","currNum","increaseSets","allCurrentExercises","timer","setTimer","ms","s","m","h","interv","setInterv","status","setStatus","totalSets","setTotalSets","numDone","setNumDone","progressPercent","setProgressPercent","start","run","setInterval","updatedMs","updatedS","updatedM","updatedH","updatedPercent","numerator","denominator","percent","console","log","play","reset","stop","clearInterval","resume","currentIcon","focus","left","icon","name"],"mappings":"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","sourcesContent":["import TimerDisplay from './TimerDisplay'\nimport TimerButton from './TimerButton'\nimport {useState} from 'react';\nimport {useEffect} from 'react';\nimport useSound from 'use-sound';\nimport beep from './beep.wav'\nimport arms from './arms.png'\nimport legs from './legs.png'\nimport cardio from './cardio.png'\nimport abs from './abs.png'\n\nconst Progress = ({newTime, id, current, handleDelete, sets, setCounter, currNum, increaseSets, allCurrentExercises}) => {\n    const [timer, setTimer] = useState({ms: 0, s: newTime, m:0, h:0});\n    const [interv, setInterv] = useState();\n    const [status, setStatus] = useState(0);\n    const [totalSets, setTotalSets] = useState(0);\n    const [numDone, setNumDone] = useState(1);\n    const [progressPercent, setProgressPercent] = useState(0)\n    //Status 0 : waiting\n    //Status 1: running\n    //Status 2: stopped\n\n    const start = () => {\n        run();\n        setStatus(1);\n        setInterv(setInterval(run, 10));\n    }\n\n    var updatedMs = timer.ms\n    var updatedS = timer.s\n    var updatedM = timer.m\n    var updatedH = timer.h\n    \n    const updatedPercent = () => {\n        let numerator = (numDone -1) + numDone* (setCounter-1)\n        let denominator = totalSets * currNum\n        let percent = numerator/denominator * 100 + \"%\"\n        console.log(numerator, denominator, percent)\n        setProgressPercent(percent)\n    }\n\n    //Checks if timer has reached 0 -> if so, resets timer and deletes most recent exercise\n    useEffect(() => {\n        if (updatedMs === 0 && updatedS === 0 && updatedM === 0 & updatedH === 0){\n            play()\n            reset();\n            handleDelete(id, numDone, allCurrentExercises)\n            setNumDone(numDone+1)\n            if (numDone === currNum){\n                increaseSets()\n                setNumDone(1)\n            }\n            updatedPercent();\n        }\n    }\n    )\n\n    useEffect(() => {\n        setTimer({ms: 0, s: newTime, m:0, h:0})\n    }, [newTime] )\n\n    useEffect(()=> {\n        setTotalSets(sets)\n    }, [sets])\n\n\n    //for continuously running timer: \n    \n    const [play] = useSound(beep);\n\n    //Decrements every ms\n    const run = () => {\n        if (updatedM === 0){\n            if (updatedH >0){\n                updatedH--;\n                updatedM = 59;\n            }\n        }\n        if (updatedS === 0){\n            if (updatedM > 0){\n                updatedM --;\n                updatedS = 59;\n            }\n        }\n        if (updatedMs === 0){\n            if (updatedS > 0){\n                updatedS--;\n                updatedMs = 99;\n            }\n        }\n        updatedMs --;\n        //console.log(\"timeron\")\n        return setTimer({ms: updatedMs, s: updatedS, m:updatedM, h:updatedH})\n    }   \n\n    const stop = () => {\n        clearInterval(interv);\n        setStatus(2);\n        console.log(\"Timer Stopped\")\n    }\n\n\n    const reset = () => {\n        clearInterval(interv);\n        setStatus(0);\n        setTimer({ms: 0, s: newTime, m:0, h:0})\n        console.log(timer, interv, status);\n    }\n\n    const resume = () => start();\n\n    const currentIcon = (focus) => {\n        if (focus === 1){\n            return abs\n        }\n        else if (focus === 2) {\n            return legs\n        }\n        else if (focus === 3){\n            return cardio\n        }\n        else {\n            return abs\n        }\n    }\n\n    return (\n        <div> {current == null? console.log(\"no more exercises\") : <div className = \"timer-holder\">\n            <div className=\"progress-details\"> \n                <h2 className=\"exercise-counter\"> Exercise: {numDone} / {currNum} </h2> \n                <div> <div className=\"progress-bar\" style={{left:{progressPercent}}}><div className=\"progress-after\"> </div></div></div>\n                <h2 className=\"set-counter\"> Set: {setCounter} / {totalSets} </h2>\n            </div>\n            <img className=\"icon\" src={current.icon? current.icon : currentIcon(current.focus)}></img>\n            <h1 className =\"exercise-title\"> {current.name}</h1>\n            \n            <TimerDisplay timer={timer}></TimerDisplay>\n            <TimerButton start={start} status={status} stop={stop} reset={reset} resume={resume}> </TimerButton>\n        </div> }\n        </div>\n    )\n}\n\nexport default Progress"]},"metadata":{},"sourceType":"module"}