[{"/Users/jane_c24/Documents/Projects/plyo/frontend/src/index.js":"1","/Users/jane_c24/Documents/Projects/plyo/frontend/src/reportWebVitals.js":"2","/Users/jane_c24/Documents/Projects/plyo/frontend/src/App.js":"3","/Users/jane_c24/Documents/Projects/plyo/frontend/src/Form.js":"4","/Users/jane_c24/Documents/Projects/plyo/frontend/src/Navbar.js":"5","/Users/jane_c24/Documents/Projects/plyo/frontend/src/ExerciseDisplay.js":"6","/Users/jane_c24/Documents/Projects/plyo/frontend/src/Timer.js":"7","/Users/jane_c24/Documents/Projects/plyo/frontend/src/TimerButton.js":"8","/Users/jane_c24/Documents/Projects/plyo/frontend/src/TimerDisplay.js":"9","/Users/jane_c24/Documents/Projects/plyo/frontend/src/Exercises.js":"10","/Users/jane_c24/Documents/Projects/plyo/frontend/src/Progress.js":"11"},{"size":549,"mtime":1609779649332,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1609715204320,"results":"14","hashOfConfig":"13"},{"size":2032,"mtime":1611685318960,"results":"15","hashOfConfig":"13"},{"size":6674,"mtime":1611685470706,"results":"16","hashOfConfig":"13"},{"size":350,"mtime":1610129071135,"results":"17","hashOfConfig":"13"},{"size":5083,"mtime":1611687160666,"results":"18","hashOfConfig":"13"},{"size":1544,"mtime":1610236212518,"results":"19","hashOfConfig":"13"},{"size":866,"mtime":1611862563250,"results":"20","hashOfConfig":"13"},{"size":416,"mtime":1611863866682,"results":"21","hashOfConfig":"13"},{"size":525,"mtime":1611539562875,"results":"22","hashOfConfig":"13"},{"size":4251,"mtime":1611872439223,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"4xjc80",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"27"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jane_c24/Documents/Projects/plyo/frontend/src/index.js",["51","52"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Button from '@material-ui/core/Button';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["53","54"],"/Users/jane_c24/Documents/Projects/plyo/frontend/src/reportWebVitals.js",[],"/Users/jane_c24/Documents/Projects/plyo/frontend/src/App.js",[],"/Users/jane_c24/Documents/Projects/plyo/frontend/src/Form.js",["55"],"import Slider from '@material-ui/core/Slider'\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button'\nimport { styled } from '@material-ui/core/styles';\nimport { useState } from 'react';\n\n\nconst myButtonGroup = styled(ButtonGroup)({\n    borderColor: 'white',\n})\n\nfunction valuetext(value){\n    return '{value} min'\n}\n\nconst Form = ({handleNum, handleTime, handleLevel, handleFocus, handleSets, challengeModeOn}) => {\n    //hooks for formatting changes on button click\n    const accentColor = 'rgba(255, 255, 255, 0.4)';\n    const [absBackgroundColor, setAbsBackgroundColor] = useState('transparent');\n    const [cardioBackgroundColor, setCardioBackgroundColor] = useState('transparent');\n    const [legsBackgroundColor, setLegsBackgroundColor] = useState('transparent');\n    const [fullBackgroundColor, setFullBackgroundColor] = useState(accentColor);\n    const [beginnerBackgroundColor, setBeginnerBackgroundColor] = useState('transparent');\n    const [mediumBackgroundColor, setMediumBackgroundColor] = useState(accentColor);\n    const [hardBackgroundColor, setHardBackgroundColor] = useState('transparent');\n    const [disable, setDisable] = useState(false);\n\n\n    //custom styling for all buttons in form\n    const MyButton = styled(Button)({\n        color: 'white',\n        borderColor: 'white',\n        marginLeft: '10px',\n    })\n\n    //runs when focus is changed\n    const handleFocusBtn = (focus) => {\n        //first, run this to pass to exerciseDisplay\n        handleFocus(focus)\n\n        //change background color if clicked\n        if (focus === 'abs'){\n            setAbsBackgroundColor(accentColor)\n            setCardioBackgroundColor('transparent')\n            setLegsBackgroundColor('transparent')\n            setFullBackgroundColor('transparent')\n            //disable if abs selected (no levels for abs)\n            setDisable(true);\n        }\n        else if (focus === 'cardio'){\n            setAbsBackgroundColor('transparent')\n            setCardioBackgroundColor(accentColor)\n            setLegsBackgroundColor('transparent')\n            setFullBackgroundColor('transparent')\n            setDisable(false);\n        }\n        else if (focus === 'legs'){\n            setAbsBackgroundColor('transparent')\n            setCardioBackgroundColor('transparent')\n            setLegsBackgroundColor(accentColor)\n            setFullBackgroundColor('transparent')\n            setDisable(false);\n        }\n        else if (focus === 'fullBody'){\n            setAbsBackgroundColor('transparent')\n            setCardioBackgroundColor('transparent')\n            setLegsBackgroundColor('transparent')\n            setFullBackgroundColor(accentColor)\n            setDisable (false);\n        }\n    }\n\n    const handleLevelBtn = (level) => {\n        handleLevel(level)\n\n        if (level === 1){\n            setBeginnerBackgroundColor(accentColor)\n            setMediumBackgroundColor('transparent')\n            setHardBackgroundColor('transparent')\n        }\n        if (level === 2){\n            setBeginnerBackgroundColor('transparent')\n            setMediumBackgroundColor(accentColor)\n            setHardBackgroundColor('transparent')\n        }\n        if (level === 3){\n            setBeginnerBackgroundColor('transparent')\n            setMediumBackgroundColor('transparent')\n            setHardBackgroundColor(accentColor)\n        }\n    }\n    \n\n    return (\n        <div className = \"form\">\n            <section className=\"glass\">\n                <h2>Focus\n                    <ButtonGroup aria-label=\"outlined primary button group\" >\n                    <MyButton className=\"abs-btn\" onClick={() => handleFocusBtn('abs')} style={{backgroundColor: absBackgroundColor}} > Abs </MyButton>\n                    <MyButton className=\"cardio-btn\" onClick={() => handleFocusBtn('cardio')} style={{backgroundColor: cardioBackgroundColor}}>Cardio</MyButton>\n                    <MyButton className=\"legs-btn\" onClick={() => handleFocusBtn('legs')} style={{backgroundColor: legsBackgroundColor}}>Legs/Glutes</MyButton>\n                    <MyButton className=\"full-btn\" onClick={() => handleFocusBtn('fullBody')} style={{backgroundColor: fullBackgroundColor}}> Full Body</MyButton>\n                    </ButtonGroup>\n                </h2>\n\n                <h2 style={{marginTop: \"38px\"}}>Level / Intensity\n                    <ButtonGroup aria-label=\"outlined primary button group\" >\n                    {/*<MyButton onClick={() => handleLevelBtn(1)} > Low Impact </MyButton>*/}\n                    <MyButton onClick={() => handleLevelBtn(1)} style={{backgroundColor: beginnerBackgroundColor}} disabled={disable} > Beginner </MyButton>\n                    <MyButton onClick={() => handleLevelBtn(2)} style={{backgroundColor: mediumBackgroundColor}} disabled={disable} > Medium</MyButton>\n                    <MyButton onClick={() => handleLevelBtn(3)} style={{backgroundColor: hardBackgroundColor}} disabled={disable} >Hard</MyButton>\n                    </ButtonGroup>\n                </h2>\n            \n\n                <div className=\"slider-holder\">\n                    <h2>Number of Exercises</h2>\n                    <Slider defaultValue={5} getAriaValueText={valuetext} onChangeCommitted={(e, value)=> handleNum(value)} area-labelledby=\"discrete-slider\" valueLabelDisplay=\"auto\" step={2} min={3} max={15} style={{width: \"240px\", marginTop: \"20px\", marginLeft: \"10px\", color: \"rgba(255, 255, 255, 0.7\"}}\n                ></Slider></div>\n                \n                <div className=\"slider-holder\">\n                    <h2>Interval length (Seconds)</h2>\n                    <Slider defaultValue={45} onChangeCommitted={(e, value)=> handleTime(value)} area-labelledby=\"discrete-slider\" valueLabelDisplay=\"auto\" step={15} min={30} max={75} style={{width: \"240px\", marginLeft:\"10px\", marginTop:\"20px\", color: \"rgba(255, 255, 255, 0.7\"}}\n                ></Slider>\n                </div>\n\n                <div className=\"slider-holder\">\n                    <h2>Number of Sets</h2>\n                    <Slider defaultValue={3} onChangeCommitted={(e, value)=> handleSets(value)} area-labelledby=\"discrete-slider\" valueLabelDisplay=\"auto\" step={1} min={1} max={10} style={{width: \"240px\", marginLeft:\"10px\", marginTop:\"20px\", color: \"rgba(255, 255, 255, 0.7\"}}\n                ></Slider>\n                </div>\n\n                {/*<button className = \"challengeButton\" onClick={challengeModeOn}> CHALLENGE MODE!</button>*/}\n                {/*<button className = \"challengebutton\" style={{marginTop: \"10px\"}} onClick={handleSubmit}> Let's Go!</button>*/}\n            </section>\n        </div>\n      );\n}\n \nexport default Form;","/Users/jane_c24/Documents/Projects/plyo/frontend/src/Navbar.js",[],"/Users/jane_c24/Documents/Projects/plyo/frontend/src/ExerciseDisplay.js",["56","57","58"],"import {useState} from 'react';\nimport Exercises from './Exercises';\nimport Progress from './Progress';\nimport {useEffect} from 'react'\nimport React from 'react'\n\nconst ExerciseDisplay = ({num, focus, level, time, sets, challengeMode, challengeModeOff}) => {\n    const myRef = React.createRef()\n    const [exercises, setExercises] = useState(null)\n    const [exerciseBank, setExerciseBank] = useState(null)\n    //create newTime variable here that changes when we submit form\n    const [newTime, setNewTime] = useState(null)\n    const [newSets, setNewSets] = useState(null)\n    const [setCounter, setSetCounter] = useState(1)\n    const [currNum, setCurrNum] = useState(5)\n    var newExercises = []\n    const [allCurrentExercises, setAllCurrentExercises] = useState(null)\n     //onload, exercises are not displayed\n    const [showResults, setShowResults] = useState(false)\n    \n   //fetch data from backend on load\n   useEffect(()=> {\n       fetch('http://127.0.0.1:8000/api/workout/')\n        .then(res => {\n           return res.json();\n        })\n        .then(data => {\n            console.log(data)\n            setExerciseBank(data)\n        })\n   }, []);\n\n   useEffect(() => {\n       if (challengeMode){\n           changeDisplay(4, 4, 'fullBody', 60, 5)\n       }\n   }, [challengeMode])\n\n    //once submit button is changed, exercises are loaded up based on given values\n    const changeDisplay = (num, level, focus, time, sets) => {\n        setNewTime(time);\n        setNewSets(sets);\n        setCurrNum(num);\n        setSetCounter(1);\n        challengeModeOff();\n\n        console.log(\"Changing exercise list to: \" + num + level + focus + newTime + \"s\")\n        //first button click reveals this group of components \n        setShowResults(true)\n        \n        //scroll to exercises when button is clicked\n        window.scrollTo(0, myRef.current.offsetTop);\n\n        var focusID = null\n        /*if (focus === 'upper'){\n            focusID = 1\n        }*/\n        if (focus === 'legs'){\n            focusID = 2\n        }\n        if (focus === 'cardio'){\n            focusID = 3\n        }\n        if (focus === 'abs'){\n            focusID = 4\n        }\n        \n        // filtering based on focus - dont need to filter if full body\n        var newExerciseBank = exerciseBank\n        if (focus !== 'fullBody'){\n            newExerciseBank = exerciseBank.filter(exercise => exercise.focus === focusID)\n        }\n        if (level === 4) {\n            newExerciseBank = newExerciseBank.filter(exercise => exercise.level = 3);\n        }\n        //don't need to filter level if abs, otherwise we do filter \n        else if (focus!== 'abs'){\n            newExerciseBank = newExerciseBank.filter(exercise => exercise.level <= level)\n        }\n\n        //add the number of requested exercises (num) to new array\n        let added = new Map()\n        for (let i = 0; i<num; i++){\n            let random = Math.floor(Math.random()*newExerciseBank.length)\n            if (newExerciseBank.length > num) {\n                while (added[random] === 1){\n                random =Math.floor(Math.random()*newExerciseBank.length)\n                }\n            }\n            newExercises.push(newExerciseBank[random])\n            added[random] = 1\n            }\n        console.log(newExercises)\n        setExercises(newExercises);\n        setAllCurrentExercises(newExercises)\n    }\n\n    //pass the first exercise as current so that it can be deleted once completed\n    if (exercises != null){\n        if (exercises.length > 0){\n            var id = exercises[0].id;\n            var current = exercises[0]\n        }\n        else{\n            var id = null\n            var current = null\n        }\n    }\n\n    const increaseSets = ()=>{\n        setSetCounter(setCounter+1);\n    }\n\n     //called when the timer reaches 0 -> deletes the first exercise once completed, changes exercise state \n     const handleDelete = (id, numDone, allCurrentExercises) => {\n        console.log(\"count: \" + setCounter + \"total\" + sets)\n        if (id != null){\n            const exercisesWithoutFirst = exercises.filter(exercise => exercise.id !== id);\n            setExercises(exercisesWithoutFirst);\n        }\n        if (numDone === currNum && setCounter < sets){\n            setExercises(allCurrentExercises)\n            console.log(\"TESTING NEW SET RESET: \")\n        }\n    } \n\n    return(\n        <div className=\"ExerciseDisplay\">\n            <button className=\"submitButton\" onClick={()=> changeDisplay(num, level, focus, time, sets)}> Let's Go!</button>\n            <div ref={myRef}> {showResults ? <Progress newTime = {newTime} id={id} current={current} handleDelete={handleDelete} sets={newSets} setCounter={setCounter} currNum={currNum} increaseSets = {increaseSets} allCurrentExercises={allCurrentExercises}/> : null} </div>\n            <div> {/*showResults ? <h1> Num Exercises: {num} Focus: {focus} Level: {level} Time: {newTime}</h1> : null*/}</div>\n            {exercises && <div> {showResults? <Exercises Exercises = {exercises}/> : null} </div>}\n        </div>\n    );\n}\nexport default ExerciseDisplay;","/Users/jane_c24/Documents/Projects/plyo/frontend/src/Timer.js",[],["59","60"],"/Users/jane_c24/Documents/Projects/plyo/frontend/src/TimerButton.js",[],"/Users/jane_c24/Documents/Projects/plyo/frontend/src/TimerDisplay.js",[],"/Users/jane_c24/Documents/Projects/plyo/frontend/src/Exercises.js",[],"/Users/jane_c24/Documents/Projects/plyo/frontend/src/Progress.js",["61","62","63"],{"ruleId":"64","severity":1,"message":"65","line":5,"column":8,"nodeType":"66","messageId":"67","endLine":5,"endColumn":23},{"ruleId":"64","severity":1,"message":"68","line":6,"column":8,"nodeType":"66","messageId":"67","endLine":6,"endColumn":14},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"64","severity":1,"message":"73","line":8,"column":7,"nodeType":"66","messageId":"67","endLine":8,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":37,"column":7,"nodeType":"76","endLine":37,"endColumn":22,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":105,"column":17,"nodeType":"66","messageId":"80","endLine":105,"endColumn":19},{"ruleId":"78","severity":1,"message":"81","line":106,"column":17,"nodeType":"66","messageId":"80","endLine":106,"endColumn":24},{"ruleId":"69","replacedBy":"82"},{"ruleId":"71","replacedBy":"83"},{"ruleId":"64","severity":1,"message":"84","line":7,"column":8,"nodeType":"66","messageId":"67","endLine":7,"endColumn":12},{"ruleId":"74","severity":1,"message":"85","line":43,"column":5,"nodeType":"66","endLine":43,"endColumn":14,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":134,"column":13,"nodeType":"89","endLine":134,"endColumn":97},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'myButtonGroup' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'changeDisplay'. Either include it or remove the dependency array.","ArrayExpression",["92"],"no-redeclare","'id' is already defined.","redeclared","'current' is already defined.",["90"],["91"],"'arms' is defined but never used.","React Hook useEffect contains a call to 'setNumDone'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [updatedMs, updatedS, updatedM, updatedH, play, reset, handleDelete, id, numDone, allCurrentExercises, currNum, updatedPercent, increaseSets] as a second argument to the useEffect Hook.",["93"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [challengeMode, changeDisplay]",{"range":"98","text":"99"},"Add dependencies array: [updatedMs, updatedS, updatedM, updatedH, play, reset, handleDelete, id, numDone, allCurrentExercises, currNum, updatedPercent, increaseSets]",{"range":"100","text":"101"},[1272,1287],"[challengeMode, changeDisplay]",[1861,1861],", [updatedMs, updatedS, updatedM, updatedH, play, reset, handleDelete, id, numDone, allCurrentExercises, currNum, updatedPercent, increaseSets]"]